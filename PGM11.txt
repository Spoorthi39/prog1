package com.jdbc.student;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Scanner;

public class StudentDatabase {
	private static Connection connection=null;
	private static Scanner sc=new Scanner(System.in);
	public static void main(String[] args) {
		
		StudentDatabase SD=new StudentDatabase();
		
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");	
			String dbURL="jdbc:mysql://localhost:3306/jdbc_db";
			String username="root";
			String password="Mysql@123";
			
			connection = DriverManager.getConnection(dbURL,username,password);
			while(true) {
			System.out.println("Enter your Choice");
			System.out.println("1: Insert Record");
			System.out.println("2: Select Record");
			System.out.println("3: Callable Statement: Select Records");
			System.out.println("4: Callable Statement: Select Record by Roll number");
			System.out.println("5: Update Record");
			System.out.println("6: Delete");
			System.out.println("7: Understanding Transactions");
						
			int choice= Integer.parseInt(sc.nextLine());
			
			switch(choice){
			case 1: SD.insertRecord();
				break;
			case 2: SD.selectRecord();
				break;
			case 3: SD.selectAllRecords();
				break;
			case 4: SD.selectRecordByRollNumber();
				break;
			case 5: SD. updateRecord();
				break;
			case 6: SD.deleteRecord();
				break;
			case 7: SD.transaction();
				break;
					
			default: 
				break;
				
			}
			}	
		}catch(Exception e){
			throw new RuntimeException("Something went wrong");
		}
	}

	private void insertRecord() throws SQLException {
		String sql="insert into student(name, percentage, address) values (?,?,?)";		
		PreparedStatement ps=connection.prepareStatement(sql);
		System.out.println("Enter Name:");
		ps.setString(1,sc.nextLine());
		System.out.println("Enter Percentage:");
		ps.setDouble(2,Double.parseDouble(sc.nextLine()));
		System.out.println("Enter Address:");
		ps.setString(3,sc.nextLine());
		
		int rows=ps.executeUpdate();
		
		if(rows>0) {
			System.out.println("Record Inserted Successfully");
		}
	}
	
	public void selectRecord() throws SQLException{
		System.out.println("Enter the roll number to be searched");
		int number=Integer.parseInt(sc.nextLine());
		String sql="select * from student where roll_num="+number;
	    Statement st= connection.createStatement();	
	    ResultSet result=st.executeQuery(sql);
	        if(result.next()) {
	    	int rollNum=result.getInt("roll_num");
	    	String name=result.getString("name");
	    	double percentage=result.getDouble("percentage");
	    	String address=result.getString("address");
	    	
	    	System.out.println("Roll Number is:"+rollNum);
	    	System.out.println("Name is:"+name);
	    	System.out.println("Percentage is:"+percentage);
	    	System.out.println("Address is:"+address);
	      }
	    else {
	    	System.out.println("No Records found...");
	    }
		
	}
	private void selectAllRecords() throws SQLException{
		CallableStatement cs= connection.prepareCall("{ call GET_ALL() }");
		ResultSet result= cs.executeQuery();
		while(result.next()) {
	      	System.out.println("Roll Number is:"+result.getInt("roll_num"));
	    	System.out.println("Name is:"+result.getString("name"));
	    	System.out.println("Percentage is:"+result.getDouble("percentage"));
	    	System.out.println("Address is:"+result.getString("address"));
	    	System.out.println("=================================");
	    	
	      }
	}
	
	private void selectRecordByRollNumber() throws SQLException{
		System.out.println("Enter roll number to fetch details");
		int roll=Integer.parseInt(sc.nextLine());
		CallableStatement cs= connection.prepareCall("{ call GET_RECORD(?) }");
		cs.setInt(1, roll);
		ResultSet result= cs.executeQuery();
		boolean found=false;
		while(result.next()) {
			found=true;
	      	System.out.println("Roll Number is:"+result.getInt("roll_num"));
	    	System.out.println("Name is:"+result.getString("name"));
	    	System.out.println("Percentage is:"+result.getDouble("percentage"));
	    	System.out.println("Address is:"+result.getString("address"));
	    	System.out.println("=================================");
	    	
	      }
		
		if(!found)
		{
			System.out.println("No records found...");
		}
		
	   }
		
			
	
	private void updateRecord() throws SQLException {
		
		System.out.println("Enter the roll number to be Updated");
		int number=Integer.parseInt(sc.nextLine());
		String sql="select * from student where roll_num= "+number;
	    Statement st= connection.createStatement();	
	    ResultSet result=st.executeQuery(sql);
	    
	    if(result.next()) {
	    	int rollNum=result.getInt("roll_num");
	    	String name=result.getString("name");
	    	double percentage=result.getDouble("percentage");
	    	String address=result.getString("address");
	    	
	    	System.out.println("Roll Number is:"+rollNum);
	    	System.out.println("Name is:"+name);
	    	System.out.println("Percentage is:"+percentage);
	    	System.out.println("Address is:"+address);
	    	
	    	System.out.println("What do you want to update?");
	    	System.out.println("1. Name: ");
	    	System.out.println("2. Percentage: ");
	    	System.out.println("3. Address: ");
	    	
	    	int choice=Integer.parseInt(sc.nextLine());
	    	//String sqlQuery1 ="UPDATE student SET";
	    	
	    	switch(choice) {
	    	case 1:
	    			/*sqlQuery= sqlQuery + "name = 'deep' where roll_num = " +rollNum; 
	    		PreparedStatement preparedStatement = connection.prepareStatement(sqlQuery);
	    		int rows = preparedStatement.executeUpdate();
	    		if(rows > 0) {
	    			System.out.println("Recod updated successfully");
	    		}*/
	    		
	    		System.out.println("Enter new name: ");
	    		String nameToUpdate = sc.nextLine();
	    		String sqlQuery = "UPDATE student SET name = ? WHERE roll_num = " +rollNum;

	            try {
	                // Create a prepared statement
	                PreparedStatement preparedStatement = connection.prepareStatement(sqlQuery);
	                preparedStatement.setString(1, nameToUpdate); // Set the name parameter
	               // preparedStatement.setInt(2, roll); // Set the roll_num parameter

	                // Execute the update
	                int rows = preparedStatement.executeUpdate();

	                if (rows > 0) {
	                    System.out.println("Record updated successfully");
	                } else {
	                    System.out.println("No records updated");
	                }
	            } catch (SQLException e) {
	                e.printStackTrace();
	            }
	            			    		
	    		break;
	    	case 2: 
	    		System.out.println("Enter new percentage");
	    		double newPerncetage = Double.parseDouble(sc.nextLine());
	    		String sqlQuery1 = "UPDATE student SET percentage = ?  WHERE roll_num = " +rollNum;
	    		try {
	    		PreparedStatement preparedStatement1 = connection.prepareStatement(sqlQuery1);
	    		preparedStatement1.setDouble(1, newPerncetage);
	    		 int rows1 = preparedStatement1.executeUpdate();

	                if (rows1 > 0) {
	                    System.out.println("Record updated successfully");
	                } else {
	                    System.out.println("No records updated");
	                }
	            } catch (SQLException e) {
	                e.printStackTrace();
	            }
	    		
	    		break;
	    	case 3:
	    		System.out.println("Enter new Address");
	    		String newAddress = sc.nextLine();
	    		String sqlQuery2 = "UPDATE student SET address = ?  WHERE roll_num = " +rollNum;
	    		try {
	    		PreparedStatement preparedStatement2 = connection.prepareStatement(sqlQuery2);
	    		preparedStatement2.setString(1, newAddress);
	    		 int rows2 = preparedStatement2.executeUpdate();

	                if (rows2 > 0) {
	                    System.out.println("Record updated successfully");
	                } else {
	                    System.out.println("No records updated");
	                }
	            } catch (SQLException e) {
	                e.printStackTrace();
	            }
	    		break;
	    	default:
	    		break;
	    	}
	    	
	      }
	    else {
	    	System.out.println("No Record found...");
	    }
		
		
	}
	
	public void deleteRecord() throws SQLException{
		System.out.println("Enter the roll number to be deleted");
		int Roll = Integer.parseInt(sc.nextLine());
		String sql = "delete from student where roll_num = " + Roll;
		Statement st = connection.createStatement();
		int rows = st.executeUpdate(sql);
		if(rows > 0)
			System.out.println("Record is deleted Successfully");
		else 
			System.out.println("No Records found");
	
	}
	
	public void transaction() throws SQLException {
		connection.setAutoCommit(false);
		
		String sql1 = "INSERT INTO STUDENT (NAME,PERCENTAGE, ADDRESS) VALUES ('Mrunal', 78, 'Delhi')";
		String sql2 = "INSERT INTO STUDENT (NAME,PERCENTAGE, ADDRESS) VALUES ('ABC', 69, 'up')";
		
		PreparedStatement preparedStatement = connection.prepareStatement(sql1);
		int rows1 = preparedStatement.executeUpdate();
		
		preparedStatement = connection.prepareStatement(sql2);
		int rows2 = preparedStatement.executeUpdate();
		
		if( rows1 > 0 && rows2 > 0) {
			connection.commit();
		}
		else {
			connection.rollback();
		}
		
	}
}
